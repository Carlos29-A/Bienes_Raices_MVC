/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/chatBot.js":
/*!***************************!*\
  !*** ./src/js/chatBot.js ***!
  \***************************/
/***/ (() => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _openrouter_ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @openrouter/ai-sdk-provider */ \"./node_modules/@openrouter/ai-sdk-provider/dist/index.mjs\");\n/* harmony import */ var ai__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ai */ \"./node_modules/ai/dist/index.mjs\");\n// Importamos las librerias\r\n\r\n\r\n\r\n// Funci√≥n para inicializar el chatbot\r\nfunction initializeChatbot() {\r\n    // Verificar si tenemos la clave API\r\n    if (!window.OPENROUTER_API_KEY) {\r\n        console.error('Error: OPENROUTER_API_KEY no est√° configurada.');\r\n        return;\r\n    }\r\n\r\n    const openRouter = (0,_openrouter_ai_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.createOpenRouter)({\r\n        apiKey: window.OPENROUTER_API_KEY\r\n    });\r\n\r\n    // Contexto base del sistema\r\n    const SYSTEM_CONTEXT = `\r\n    Soy un asistente virtual especializado en el sistema de Bienes Ra√≠ces. Te ayudar√© a entender c√≥mo funciona cada parte del sistema:\r\n\r\n    üìå TIPOS DE USUARIOS Y FUNCIONES:\r\n\r\n    üë§ USUARIO P√öBLICO\r\n    - Ver listado de propiedades\r\n    - Usar filtros de b√∫squeda\r\n    - Ver detalles de propiedades\r\n    - Registrarse como comprador o vendedor\r\n\r\n    Proceso de Registro:\r\n    1. Clic en \"Crear Cuenta\"\r\n    2. Elegir tipo: Comprador o Vendedor\r\n    3. Completar datos personales\r\n    4. Verificar email\r\n    5. [Vendedor] Esperar aprobaci√≥n\r\n\r\n    üè† COMPRADOR\r\n    Acceso:\r\n    1. Registrarse como comprador\r\n    2. Confirmar email\r\n    3. Iniciar sesi√≥n\r\n\r\n    Funciones:\r\n    - Guardar y gestionar favoritos\r\n    - Enviar mensajes a vendedores\r\n    - Calificar propiedades visitadas\r\n    - Usar b√∫squeda avanzada\r\n    - Ver historial de mensajes\r\n    - Recibir notificaciones\r\n\r\n    üíº VENDEDOR\r\n    Acceso:\r\n    1. Registrarse como vendedor\r\n    2. Confirmar email\r\n    3. Esperar aprobaci√≥n admin\r\n    4. Iniciar sesi√≥n\r\n\r\n    Funciones:\r\n    - Publicar propiedades\r\n    - Gestionar publicaciones\r\n    - Subir y organizar im√°genes\r\n    - Responder mensajes\r\n    - Ver estad√≠sticas\r\n    - Gestionar perfil\r\n\r\n    üë®‚Äçüíº ADMINISTRADOR\r\n    Acceso:\r\n    - Credenciales especiales de administrador\r\n\r\n    Funciones:\r\n    - Aprobar vendedores\r\n    - Moderar propiedades\r\n    - Gestionar categor√≠as\r\n    - Supervisar mensajes\r\n    - Ver estad√≠sticas\r\n    - Gestionar usuarios\r\n\r\n    üîÑ PROCESOS PRINCIPALES:\r\n\r\n    üìù PUBLICAR PROPIEDAD:\r\n    1. Iniciar sesi√≥n como vendedor\r\n    2. Ir a \"Publicar Propiedad\"\r\n    3. Completar informaci√≥n\r\n    4. Subir im√°genes\r\n    5. Esperar aprobaci√≥n\r\n\r\n    üí¨ CONTACTAR VENDEDOR:\r\n    1. Ver detalle de propiedad\r\n    2. Clic en \"Contactar\"\r\n    3. Escribir mensaje\r\n    4. Esperar respuesta\r\n    5. Chat activo\r\n\r\n    ‚≠ê CALIFICAR PROPIEDAD:\r\n    1. Visitar propiedad\r\n    2. Ir a \"Calificar\"\r\n    3. Asignar puntuaci√≥n\r\n    4. Dejar comentario\r\n    5. Enviar calificaci√≥n\r\n\r\n    ‚ùì ¬øEn qu√© puedo ayudarte? Puedes preguntarme sobre:\r\n    - C√≥mo realizar acciones espec√≠ficas\r\n    - Detalles de cada tipo de usuario\r\n    - Procesos del sistema\r\n    - Funcionalidades disponibles\r\n    `;\r\n\r\n    // Elementos del DOM\r\n    const toggleChat = document.querySelector('#toggleChat');\r\n    const minimizeChat = document.querySelector('#minimizeChat');\r\n    const chatWindow = document.querySelector('#chatWindow');\r\n    const formulario = document.querySelector('#formulario');\r\n    const mensajeInput = document.querySelector('#mensaje');\r\n    const enviarBtn = document.querySelector('#enviar');\r\n    const respuestaContainer = document.querySelector('#respuesta');\r\n\r\n    // Funci√≥n para ajustar la altura del textarea\r\n    function adjustTextareaHeight() {\r\n        mensajeInput.style.height = 'auto';\r\n        mensajeInput.style.height = (mensajeInput.scrollHeight) + 'px';\r\n    }\r\n\r\n    // Funci√≥n para crear un elemento de mensaje\r\n    function createMessageElement(text, isUser = false) {\r\n        const messageDiv = document.createElement('div');\r\n        messageDiv.className = `flex items-start gap-2 animate-fade-in ${isUser ? 'flex-row-reverse' : ''}`;\r\n        \r\n        const iconContainer = document.createElement('div');\r\n        iconContainer.className = 'bg-white rounded-full p-2 flex items-center justify-center';\r\n        \r\n        const icon = document.createElement('i');\r\n        icon.className = isUser ? 'fas fa-user text-[#FF6819] text-sm' : 'fas fa-robot text-[#FF6819] text-sm';\r\n        \r\n        const messageContent = document.createElement('div');\r\n        messageContent.className = `rounded-lg p-3 shadow-sm ${isUser ? 'bg-[#FF6819] text-white' : 'bg-white text-gray-800'} ${isUser ? 'ml-auto' : ''} max-w-[80%]`;\r\n        \r\n        const messageText = document.createElement('p');\r\n        messageText.className = 'whitespace-pre-wrap'; // Preservar saltos de l√≠nea\r\n        messageText.innerHTML = isUser ? text : formatMessage(text);\r\n        \r\n        iconContainer.appendChild(icon);\r\n        messageContent.appendChild(messageText);\r\n        messageDiv.appendChild(iconContainer);\r\n        messageDiv.appendChild(messageContent);\r\n        \r\n        return messageDiv;\r\n    }\r\n\r\n    // Funci√≥n para formatear el texto con emojis y estilos\r\n    function formatMessage(text) {\r\n        return text\r\n            .replace(/VISITANTE/g, 'üë§ VISITANTE')\r\n            .replace(/COMPRADOR/g, 'üè† COMPRADOR')\r\n            .replace(/VENDEDOR/g, 'üíº VENDEDOR')\r\n            .replace(/ADMINISTRADOR/g, 'üë®‚Äçüíº ADMINISTRADOR')\r\n            .replace(/REGISTRO:/g, 'üìù REGISTRO:')\r\n            .replace(/FUNCIONES:/g, 'üîë FUNCIONES:')\r\n            .replace(/PASOS:/g, 'üìã PASOS:')\r\n            .replace(/\\n-/g, '\\n‚Ä¢ ') // Convertir guiones en bullets\r\n            .replace(/\\n\\d\\./g, match => `\\n${match.replace('.', ')')}`) // Convertir n√∫meros en formato de lista\r\n            .trim();\r\n    }\r\n\r\n    // Funci√≥n para hacer scroll al √∫ltimo mensaje\r\n    function scrollToBottom() {\r\n        respuestaContainer.scrollTop = respuestaContainer.scrollHeight;\r\n    }\r\n\r\n    // Event Listeners\r\n    if (toggleChat) {\r\n        toggleChat.addEventListener('click', () => {\r\n            chatWindow.classList.toggle('hidden');\r\n            if (!chatWindow.classList.contains('hidden')) {\r\n                mensajeInput.focus();\r\n            }\r\n        });\r\n    }\r\n\r\n    if (minimizeChat) {\r\n        minimizeChat.addEventListener('click', () => {\r\n            chatWindow.classList.add('hidden');\r\n        });\r\n    }\r\n\r\n    if (mensajeInput) {\r\n        mensajeInput.addEventListener('input', adjustTextareaHeight);\r\n        mensajeInput.addEventListener('keydown', (e) => {\r\n            if (e.key === 'Enter' && !e.shiftKey) {\r\n                e.preventDefault();\r\n                formulario.dispatchEvent(new Event('submit'));\r\n            }\r\n        });\r\n    }\r\n\r\n    if (formulario) {\r\n        formulario.addEventListener('submit', async (e) => {\r\n            e.preventDefault();\r\n\r\n            try {\r\n                if (!window.OPENROUTER_API_KEY) {\r\n                    throw new Error('OPENROUTER_API_KEY no est√° configurada.');\r\n                }\r\n\r\n                const mensaje = mensajeInput.value.trim();\r\n\r\n                if (mensaje === '') {\r\n                    return;\r\n                }\r\n\r\n                // Agregar mensaje del usuario\r\n                respuestaContainer.appendChild(createMessageElement(mensaje, true));\r\n                scrollToBottom();\r\n\r\n                // Limpiar input y ajustar altura\r\n                mensajeInput.value = '';\r\n                adjustTextareaHeight();\r\n                enviarBtn.disabled = true;\r\n\r\n                // Indicador de escritura\r\n                const typingIndicator = createMessageElement('...', false);\r\n                respuestaContainer.appendChild(typingIndicator);\r\n                scrollToBottom();\r\n\r\n                // Construir el prompt\r\n                const promptCompleto = `${SYSTEM_CONTEXT}\\n\\nPregunta del usuario: ${mensaje}\\n\\nPor favor, proporciona una respuesta detallada y espec√≠fica basada en el sistema de Bienes Ra√≠ces:`;\r\n\r\n                const resultado = (0,ai__WEBPACK_IMPORTED_MODULE_1__.streamText)({\r\n                    model: openRouter('google/gemini-2.0-flash-exp:free'),\r\n                    prompt: promptCompleto,\r\n                    temperature: 0.7,\r\n                    max_tokens: 1000,\r\n                });\r\n\r\n                // Preparar para la nueva respuesta\r\n                let respuestaCompleta = '';\r\n\r\n                // Procesar la respuesta\r\n                for await (const text of resultado.textStream) {\r\n                    respuestaCompleta += text;\r\n                    typingIndicator.querySelector('p').textContent = respuestaCompleta;\r\n                    scrollToBottom();\r\n                }\r\n\r\n                // Reemplazar el indicador de escritura con la respuesta final\r\n                typingIndicator.replaceWith(createMessageElement(respuestaCompleta, false));\r\n                scrollToBottom();\r\n\r\n                enviarBtn.disabled = false;\r\n                mensajeInput.focus();\r\n\r\n            } catch (error) {\r\n                console.error('Error al procesar el mensaje:', error);\r\n                alert('Hubo un error al procesar tu mensaje. Por favor, intenta de nuevo.');\r\n                enviarBtn.disabled = false;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n// Esperar a que el DOM est√© cargado y la API key est√© disponible\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    // Intentar inicializar cada 100ms hasta que la API key est√© disponible\r\n    const initInterval = setInterval(() => {\r\n        if (window.OPENROUTER_API_KEY) {\r\n            clearInterval(initInterval);\r\n            initializeChatbot();\r\n        }\r\n    }, 100);\r\n\r\n    // Timeout despu√©s de 5 segundos para evitar bucle infinito\r\n    setTimeout(() => {\r\n        clearInterval(initInterval);\r\n        if (!window.OPENROUTER_API_KEY) {\r\n            console.error('Error: No se pudo inicializar el chatbot despu√©s de 5 segundos.');\r\n        }\r\n    }, 5000);\r\n});\n\n//# sourceURL=webpack://bienes_raices_mvc/./src/js/chatBot.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module doesn't tell about it's top-level declarations so it can't be inlined
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/chatBot.js"]();
/******/ 	
/******/ })()
;